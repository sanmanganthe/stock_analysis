# -*- coding: utf-8 -*-
"""stock_prediction_v1_lstm.pynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bh4pOeFZ1xvseb01H8psHeastBdg4VLf
"""

# Stock Prediction version 1 - LSTM

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# config values
stock='RELIANCE.BO'
stock='AAPL'
history_data_source='yahoo'
no_past_days=500

#yyyy-mm-dd
model_start_date='2008-01-01'
model_end_date='2020-07-01'

#LSTM values

#get stock pri
df = web.DataReader(stock, data_source=history_data_source, start=model_start_date, end=model_end_date)
#df

# get shape
df.shape

# show diagram
plt.figure(figsize=(20,8))
plt.title('Closing Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.plot(df['Close'])
plt.show()

# filter the closing price
data = df.filter(['Close'])
dataset = data.values
training_data_length = math.ceil(len(dataset)* 0.8)
#training_data_length

#scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
#scaled_data

#create training data
training_data = scaled_data[0: training_data_length, :]
x_train = []
y_train = []

for i in range(no_past_days, len(training_data)):
  x_train.append(training_data[i-no_past_days:i,0])
  y_train.append(training_data[i,0])
#  if i <= 61:
#    print(x_train)
#    print(predicted_value)
#    print()

#convert to array
x_train, y_train= np.array(x_train), np.array(y_train)

print(len(x_train))
print(len(y_train))
x_train.shape

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#build LSTM model
model = Sequential()
#50,50,25
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
#model

#compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

#create test data - fix this
test_data = scaled_data[training_data_length-no_past_days:, :]

x_test = []
y_test = dataset[training_data_length:,:]

for j in range (no_past_days, len(test_data)):
  x_test.append(test_data[j-no_past_days:j, 0])

# convert to numpy array
x_test = np.array(x_test)
#reshape data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# get models prediction
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get root mean sq error
rmse = np.sqrt( np.mean(predictions - y_test)**2)
print(rmse)

# plot the data
train = data[:training_data_length]
valid = data[training_data_length:]
valid['Predictions'] = predictions

#show data
plt.figure(figsize=(20,8))
plt.title('model')
plt.xlabel('Date')
plt.ylabel('Price')
plt.plot(train['Close'])
plt.plot(valid['Close'])
plt.plot(valid['Predictions'])
#plt.plot(valid[['Close','Predictions']])
plt.show()